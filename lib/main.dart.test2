import 'package:dio_rxdart_bloc/model/cart_model.dart';
import 'package:dio_rxdart_bloc/model/catalog.dart';
import 'package:dio_rxdart_bloc/provider_demo/cart_widget.dart';
import 'package:dio_rxdart_bloc/provider_demo/catalog_widget.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'common/theme.dart';

final GlobalKey<NavigatorState> _navKey = new GlobalKey<NavigatorState>();

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // Check if cached token from shared-preference,
  // If token exists and valid, then go to home screen, otherwise go to the loign screen

  @override
  Widget build(BuildContext context) {
    // using MultiProvider is convenient when providing multiple objects
    return MultiProvider(
      providers: [
        // In this sample, CatalogModel never changes, so a simple provider is sufficient
        Provider(create: (context) => CatalogModel()),

        // CartModel is implemented as a ChangeNotifier, which calls for the use of ChangeNotifierProvider.
        // Moreover, CartModel depends on Catalog Model, so a ProxyProvider is needed.
        ChangeNotifierProxyProvider<CatalogModel, CartModel>(
          create: (context) => CartModel.empty(),
          update: (context, catalog, previousCart) =>
              CartModel(catalog, previousCart),
        )
      ],
      child: MaterialApp(
          title: 'Provider Demo',
          theme: appTheme,
          initialRoute: '/',
          routes: {
            '/': (context) => MyCatalog(),
            '/catalog': (context) => MyCatalog(),
            '/cart': (context) => MyCart(),
          }),
    );
  }
}
